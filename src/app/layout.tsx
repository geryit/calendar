/**
 * Root Layout Component for Next.js Application
 *
 * This module defines the root layout of a Next.js application. It sets up the foundational layout
 * structure and imports global styles and custom fonts.
 *
 * Imports:
 * - `Metadata` type from "next" to specify the type of the `metadata` object.
 * - Global CSS styles from "./globals.css" to ensure consistent styling across the application.
 * - Custom font utilities from "@/utils/fonts" to use specific fonts throughout the app.
 *
 * Metadata:
 * - `metadata`: An object containing metadata for the application.
 *   - `title`: The title of the application, displayed in the browser tab and used in SEO.
 *   - `description`: A brief description of the application, commonly used in SEO.
 *
 * Component:
 * - `RootLayout`: A functional component that defines the root structure of the application's layout.
 *   - Props:
 *     - `children`: The child components to be rendered inside the layout. This follows the typical pattern
 *       in React for building reusable layout components.
 *   - Returns a basic HTML structure with the `lang` attribute set to "en" and custom fonts applied.
 *     - `<html>`: Sets the language of the document and applies the font classes.
 *     - `<body>`: Contains the `children`, rendering the rest of the application's content.
 *
 * Usage:
 * - This component should be used as the top-level layout component in a Next.js application.
 * - Import and apply it in the `_app.tsx` file to wrap all page components.
 *
 * Example:
 * ```tsx
 * import RootLayout from '@/app/layout';
 *
 * function MyApp({ Component, pageProps }) {
 *   return (
 *     <RootLayout>
 *       <Component {...pageProps} />
 *     </RootLayout>
 *   );
 * }
 * export default MyApp;
 * ```
 *
 * Note:
 * - The `lang` attribute on the `<html>` tag is set to "en" for English. Adjust it as per the primary language
 *   of your application.
 * - Ensure that the custom fonts are correctly imported and configured in the `@/utils/fonts` module.
 * - The `metadata` object can be expanded or modified according to the specific SEO requirements of the application.
 */
import type { Metadata } from "next";
import "./globals.css";
import { fjalla, libre, workSans } from "@/utils/fonts";

export const metadata: Metadata = {
  title: "Calendar App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html
      lang="en"
      className={`${workSans.variable} ${fjalla.variable} ${libre.variable}`}
    >
      <body>{children}</body>
    </html>
  );
}
